input {
	file {
		#path => ["C:/elastic/dataset/ejemplo.csv"]
        path => ["C:/elastic/dataset/NYPDCrashes2.csv"]
		start_position => "beginning"
	}
}

filter {
  csv {
		columns => ["date","time","borough","zip_code","latitude","longitude","location_2","on_street_name","cross_street_name","off_street_name","number_of_persons_injured","number_of_persons_killed","number_of_pedestrians_injured","number_of_pedestrians_killed","number_of_cyclist_injured","number_of_cyclist_killed","number_of_motorist_injured","number_of_motorist_killed","contributing_factor_vehicle_1","contributing_factor_vehicle_2","contributing_factor_vehicle_3","contributing_factor_vehicle_4","contributing_factor_vehicle_5","unique_key","vehicle_type_code_1","vehicle_type_code_2","vehicle_type_code_3","vehicle_type_code_4","vehicle_type_code_5"]
	}

# Quitar la primer linea del archivo
  if ([date] == "DATE") {
    drop { }
  }

  if [on_street_name] and [cross_street_name] {
	  ruby {
		#crear un nuevo campo llamado intersecion que es la combinacion de los campos ross street & on street names
        code => "event.set('intersection',[event.get('on_street_name'), event.get('cross_street_name')].sort.join('--'))"
	  }
  }
  #si los campos latitude y longitude existen, crear el campo location con estos valores separados por una ,
  if [latitude] and [longitude]  {
		mutate {
			add_field => {
		        	"location" => "%{latitude},%{longitude}"
			}
		}
  } 
  #en caso de no contar con ellos pero que el campo location_2 contenga la palabra POINT tomar esos valores, creando 2 nuevos campos llamados lat y lon
    if [location_2] =~ /POINT/ and [location] == ""  {
        grok {
            match => { "location_2" => "POINT \(%{DATA:long} %{DATA:lat}\)" }
            add_field => { "location" => "%{lat},%{long}" }
        }
    }
  # combinar los campos date y time dentro de un nuevo campo llamado datetime
	mutate {
		add_field => {
			"datetime" => "%{date} %{time}"
			"contributing_factor_vehicle" => "%{contributing_factor_vehicle_1}"
			"vehicle_type" => "%{vehicle_type_code_1}"
                
		}



  # convertir a tipo integer
		convert => ["number_of_persons_injured","integer","number_of_persons_killed","integer","number_of_pedestrians_injured","integer","number_of_pedestrians_killed","integer","number_of_cyclist_injured","integer","number_of_cyclist_killed","integer","number_of_motorist_injured","integer","number_of_motorist_killed","integer"]
		strip => ["on_street_name", "cross_street_name"]
	}
  #si el campo number_of_person_killed esta vacio agregarle un 0
  if ![number_of_persons_killed]
  {
  	mutate {
  		add_field => {"number_of_persons_killed" => "0"}
  	}
  }
  #si el campo number_of_person_injured esta vacio agregarle un 0
  if ![number_of_persons_injured]
  {
  	mutate {
  		add_field => {"number_of_persons_injured" => "0"}
  	}
  }

  #creamos un campo llamado number_persons_impacted
  ruby {
	# Obtener el numero total de personas lesionadas
	code =>  "event.set('number_persons_impacted',event.get('number_of_persons_killed') + event.get('number_of_persons_injured'))"
  }


# combinar los valores del arreglo contributing_factor_vehicle_X (X=1,2,3,4,5) en el campo contributing_factor_vehicle
	if [contributing_factor_vehicle_2] and "Unspecified" != [contributing_factor_vehicle_2] and [contributing_factor_vehicle_2] not in [contributing_factor_vehicle] {
		mutate {
			merge => ["contributing_factor_vehicle", "contributing_factor_vehicle_2"]
		}
	}

	if [contributing_factor_vehicle_3] and "Unspecified" != [contributing_factor_vehicle_3] and [contributing_factor_vehicle_3] not in [contributing_factor_vehicle] {
		mutate {
			merge => ["contributing_factor_vehicle", "contributing_factor_vehicle_3"]
		}
	}

	if [contributing_factor_vehicle_4] and "Unspecified" != [contributing_factor_vehicle_4] and [contributing_factor_vehicle_4] not in [contributing_factor_vehicle] {
		mutate {
			merge => ["contributing_factor_vehicle", "contributing_factor_vehicle_4"]
		}
	}

	if [contributing_factor_vehicle_5] and "Unspecified" != [contributing_factor_vehicle_5] and [contributing_factor_vehicle_5] not in [contributing_factor_vehicle]  {
		mutate {
			merge => ["contributing_factor_vehicle", "contributing_factor_vehicle_5"]
		}
	}

 # combinar los valores del arreglo vehicle_type_code_X (X=1,2,3,4,5) en vehicle_type
	if [vehicle_type_code_2] and "Unspecified" != [vehicle_type_code_2] and [vehicle_type_code_2] not in [vehicle_type] {
		mutate {
			merge => ["vehicle_type", "vehicle_type_code_2"]
		}
	}
	if [vehicle_type_code_3] and "Unspecified" != [vehicle_type_code_3] and [vehicle_type_code_3] not in [vehicle_type] {
		mutate {
			merge => ["vehicle_type", "vehicle_type_code_3"]
		}
	}
	if [vehicle_type_code_4] and "Unspecified" != [vehicle_type_code_4] and [vehicle_type_code_4] not in [vehicle_type] {
		mutate {
			merge => ["vehicle_type", "vehicle_type_code_4"]
		}
	}
	if [vehicle_type_code_5] and "Unspecified" != [vehicle_type_code_5] and [vehicle_type_code_5] not in [vehicle_type] {
		mutate {
			merge => ["vehicle_type", "vehicle_type_code_5"]
		}
	}

 ################################################
	date {
		match => [ "datetime", "MM/dd/YY HH:mm", "MM/dd/YY H:mm"]
		timezone => "EST"
	}

  # crear un nuevo campo hour_of_day tomado de la hora del campo time
  grok {
    match => { "time" => "%{DATA:hour_of_day}:%{GREEDYDATA}" }
    }
  mutate {
    convert => ["hour_of_day", "integer"]
    }

  # quitar algunos campos extras
	mutate {
		remove_field => ["datetime", "contributing_factor_vehicle_1", "contributing_factor_vehicle_2", "contributing_factor_vehicle_3", "contributing_factor_vehicle_4", "contributing_factor_vehicle_5","vehicle_type_code_1", "vehicle_type_code_2", "vehicle_type_code_3", "vehicle_type_code_4", "vehicle_type_code_5"]
	}


}


output {
#si deseamos enviarlo a elasticsearch podemos utilizarlo de la siguiente manera
  elasticsearch {
	hosts => "localhost:9200"
	index => "nyc_visionzero"
}
#las formas de salida, el codec ruby debug es nuestro mejor amigo
#stdout { codec => rubydebug }
  stdout { codec => dots }
}
